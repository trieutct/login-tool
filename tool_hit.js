require('dotenv').config();
require('./node-cron/index.js');
const connectDB = require('./config/connectMongoDB');
const {
    sleep,
    clearFile,
    getProxies,
    clearAccountProcessed,
    sendMessageTele,
    getDateTimeCurrent,
} = require('./common/helper');
const getbank = require('./model/getbank.js');
const { hitFunctionLogin } = require('./function/hit.function.js');

async function connectWithRetry(maxRetries = 5, delay = 3000) {
    let connected = false;
    let retryCount = 0;

    while (!connected && retryCount < maxRetries) {
        try {
            await connectDB();
            connected = true;
            await sendMessageTele('‚úÖ ƒê√£ k·∫øt n·ªëi DB th√†nh c√¥ng', 1);
        } catch (err) {
            retryCount++;
            await sendMessageTele(
                `‚ùå L·ªói k·∫øt n·ªëi DB (l·∫ßn ${retryCount}): ${err?.message || 'L·ªói k·∫øt n·ªëi DB'}`,
                1,
            );
            if (retryCount < maxRetries) {
                await sendMessageTele(
                    `üîÑ Th·ª≠ k·∫øt n·ªëi l·∫°i sau ${delay / 1000} gi√¢y...`,
                    1,
                );
                await new Promise((res) => setTimeout(res, delay));
            } else {
                await sendMessageTele(
                    '‚õî Kh√¥ng th·ªÉ k·∫øt n·ªëi DB sau nhi·ªÅu l·∫ßn th·ª≠, d·ª´ng ch∆∞∆°ng tr√¨nh.',
                    1,
                );

                process.exit(1);
            }
        }
    }
}

async function runTask() {
    await connectWithRetry(5, 3000);

    const [proxyTinh, proxyXoay, banks] = await Promise.all([
        getProxies('proxy.txt', false),
        getProxies('proxy-rotating.txt', false),
        getbank.find(),
        clearAccountProcessed(),
    ]);
    console.log('C√≥ d·ªØ li·ªáu trong c∆° s·ªü d·ªØ li·ªáu: ', banks.length);

    while (true) {
        try {
            await sendMessageTele('üü¢ Start ch·∫°y app HIT: ' + getDateTimeCurrent(), 1);
            await hitFunctionLogin(banks, proxyXoay);
            console.log('‚úÖ Ho√†n t·∫•t 1 v√≤ng, ngh·ªâ 1 ph√∫t tr∆∞·ªõc khi ch·∫°y l·∫°i...');
            await sleep(5 * 1000);
        } catch (error) {
            console.log(`‚ùå Error runTask: ${error?.message || 'runTask'}`);
            await sleep(5000);
            continue;
        }
    }
}

if (require.main === module) {
    try {
        setTimeout(() => {
            try {
                clearFile();
                runTask();
            } catch (taskError) {
                console.error('L·ªói khi ch·∫°y c√°c c√¥ng vi·ªác:', taskError);
            }
        }, 5000);
    } catch (dbError) {
        console.error('L·ªói khi k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu:', dbError);
    }
}
